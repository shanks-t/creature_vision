{
  "components": {
    "comp-custom-training-job": {
      "executorLabel": "exec-custom-training-job",
      "inputDefinitions": {
        "parameters": {
          "base_output_directory": {
            "defaultValue": "",
            "description": "The Cloud Storage location to store the output of this CustomJob or HyperparameterTuningJob. See [more information ](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/GcsDestination).",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "display_name": {
            "description": "The name of the CustomJob.",
            "parameterType": "STRING"
          },
          "enable_web_access": {
            "defaultValue": false,
            "description": "Whether you want Vertex AI to enable [interactive shell access ](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) to training containers. If `True`, you can access interactive shells at the URIs given by [CustomJob.web_access_uris][].",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "encryption_spec_key_name": {
            "defaultValue": "",
            "description": "Customer-managed encryption key options for the CustomJob. If this is set, then all resources created by the CustomJob will be encrypted with the provided encryption key.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "labels": {
            "defaultValue": {},
            "description": "The labels with user-defined metadata to organize the CustomJob. See [more information](https://goo.gl/xmQnxf).",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "{{$.pipeline_google_cloud_location}}",
            "description": "Location for creating the custom training job. If not set, default to the location where the PipelineJob is run.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "max_wait_duration": {
            "defaultValue": "86400s",
            "description": "The maximum time to wait for the custom training job to be scheduled only if the scheduling strategy is set to FLEX_START. If set to 0, the job will wait indefinitely. The default is 24 hours. See [more information](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/CustomJobSpec#Strategy).",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "network": {
            "defaultValue": "",
            "description": "The full name of the Compute Engine network to which the job should be peered. For example, `projects/12345/global/networks/myVPC`. Format is of the form `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is a network name. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "persistent_resource_id": {
            "defaultValue": "{{$.pipeline_persistent_resource_id}}",
            "description": "The ID of the PersistentResource in the same Project and Location which to run. The default value is a placeholder that will be resolved to the PipelineJob [RuntimeConfig](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.pipelineJobs#PipelineJob.RuntimeConfig)'s persistent resource id at runtime. However, if the PipelineJob doesn't set Persistent Resource as the job level runtime, the placedholder will be resolved to an empty string and the custom job will be run on demand. If the value is set explicitly, the custom job will runs in the specified persistent resource, in this case, please note the network and CMEK configs on the job should be consistent with those on the PersistentResource, otherwise, the job will be rejected.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "defaultValue": "{{$.pipeline_google_cloud_project_id}}",
            "description": "Project to create the custom training job in. Defaults to the project in which the PipelineJob is run.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "reserved_ip_ranges": {
            "defaultValue": [],
            "description": "A list of names for the reserved IP ranges under the VPC network that can be used for this job. If set, we will deploy the job within the provided IP ranges. Otherwise, the job will be deployed to any IP ranges under the provided VPC network.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "restart_job_on_worker_restart": {
            "defaultValue": false,
            "description": "Restarts the entire CustomJob if a worker gets restarted. This feature can be used by distributed training jobs that are not resilient to workers leaving and joining a job.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "service_account": {
            "defaultValue": "",
            "description": "Sets the default service account for workload run-as account. The [service account ](https://cloud.google.com/vertex-ai/docs/pipelines/configure-project#service-account) running the pipeline submitting jobs must have act-as permission on this run-as account. If unspecified, the Vertex AI Custom Code [Service Agent ](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) for the CustomJob's project.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "strategy": {
            "defaultValue": "STANDARD",
            "description": "The strategy to use for the custom training job. The default is 'STANDARD'. See [more information](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/CustomJobSpec#Strategy).",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "tensorboard": {
            "defaultValue": "",
            "description": "The name of a Vertex AI TensorBoard resource to which this CustomJob will upload TensorBoard logs.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "timeout": {
            "defaultValue": "604800s",
            "description": "The maximum job running time. The default is 7 days. A duration in seconds with up to nine fractional digits, terminated by 's', for example: \"3.5s\".",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "worker_pool_specs": {
            "defaultValue": [],
            "description": "Serialized json spec of the worker pools including machine type and Docker image. All worker pools except the first one are optional and can be skipped by providing an empty value. See [more information](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/CustomJobSpec#WorkerPoolSpec).",
            "isOptional": true,
            "parameterType": "LIST"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "gcp_resources": {
            "description": "Serialized JSON of `gcp_resources` [proto](https://github.com/kubeflow/pipelines/tree/master/components/google-cloud/google_cloud_pipeline_components/proto) which tracks the CustomJob.",
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-dataflow-flex-template": {
      "executorLabel": "exec-dataflow-flex-template",
      "inputDefinitions": {
        "parameters": {
          "additional_experiments": {
            "defaultValue": [],
            "description": "Additional experiment flags for the job.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "additional_user_labels": {
            "defaultValue": {},
            "description": "Additional user labels to be specified for the job. Keys and values must follow the restrictions specified in the labeling restrictions page (https://cloud.google.com/compute/docs/labeling-resources#restrictions). An object containing a list of \"key\": value pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"1kg\", \"count\": \"3\" }`.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "autoscaling_algorithm": {
            "defaultValue": "",
            "description": "The algorithm to use for autoscaling. If empty or unspecified, the Dataflow service sets a default value. For more details, see https://cloud.google.com/dataflow/docs/reference/pipeline-options#resource_utilization.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "container_spec_gcs_path": {
            "description": "Cloud Storage path to a file with json serialized ContainerSpec as content.",
            "parameterType": "STRING"
          },
          "disk_size_gb": {
            "defaultValue": 0.0,
            "description": "Worker disk size, in gigabytes. If empty or unspecified, the Dataflow service determines an appropriate disk size.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "dump_heap_on_oom": {
            "defaultValue": false,
            "description": "If true, when processing time is spent almost entirely on garbage collection (GC), saves a heap dump before ending the thread or process. If false, ends the thread or process without saving a heap dump. Does not save a heap dump when the Java Virtual Machine (JVM) has an out of memory error during processing. The location of the heap file is either echoed back to the user, or the user is given the opportunity to download the heap file.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "enable_launcher_vm_serial_port_logging": {
            "defaultValue": false,
            "description": "If true serial port logging will be enabled for the launcher VM.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "enable_streaming_engine": {
            "defaultValue": false,
            "description": "Whether to enable Streaming Engine for the job.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "flexrs_goal": {
            "defaultValue": "",
            "description": "Set FlexRS goal for the job. For more details, see https://cloud.google.com/dataflow/docs/guides/flexrs.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "ip_configuration": {
            "defaultValue": "",
            "description": "Configuration for VM IPs.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "job_name": {
            "defaultValue": "",
            "description": "The job name to use for the created job. For update job requests, the job name should be the same as the existing running job. If none is specified, a default name will be generated by the component.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "kms_key_name": {
            "defaultValue": "",
            "description": "Name for the Cloud KMS key for the job. Key format is \"projects/HOST_PROJECT_ID/locations/LOCATION/keyRings/KEYRING_ID/cryptoKeys/CRYPTO_KEY_ID\"",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "launch_options": {
            "defaultValue": {},
            "description": "Launch options for this flex template job. This is a common set of options across languages and templates. This should not be used to pass job parameters.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "launcher_machine_type": {
            "defaultValue": "",
            "description": "The machine type to use for launching the Dataflow job. The default is n1-standard-1.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "location": {
            "defaultValue": "us-central1",
            "description": "The regional endpoint to which to direct the request. E.g., us-central1, us-west1. Defaults to `us-central1` if not set.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "machine_type": {
            "defaultValue": "",
            "description": "The machine type to use for the Dataflow job. Defaults to the value from the template if not specified.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "max_workers": {
            "defaultValue": 0.0,
            "description": "The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. If empty or unspecified, the Dataflow service determines a default maximum number of instances. For more details, see https://cloud.google.com/dataflow/docs/horizontal-autoscaling.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "network": {
            "defaultValue": "",
            "description": "Network to which VMs will be assigned. If empty or unspecified, the service will use the network \"default\".",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "num_workers": {
            "defaultValue": 0.0,
            "description": "The initial number of Google Compute Engine instances for the job. If empty or unspecified, the Dataflow service determines an appropriate number of workers.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "parameters": {
            "defaultValue": {},
            "description": "The parameters for the flex template. Ex. {\"my_template_param\":\"5\"}",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "project": {
            "defaultValue": "{{$.pipeline_google_cloud_project_id}}",
            "description": "The ID of the Cloud Platform project that the job belongs to. Defaults to the project in which the PipelineJob is run.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "save_heap_dumps_to_gcs_path": {
            "defaultValue": "",
            "description": "Cloud Storage bucket (directory) to upload heap dumps to. Enabling this field implies that dump_heap_on_oom is set to true.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "sdk_container_image": {
            "defaultValue": "",
            "description": "Docker registry location (e.g. Artifact Registry) of the container image to use for the worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable Dataflow pipeline jobs.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "service_account_email": {
            "defaultValue": "",
            "description": "The email address of the service account to run the job as. If unspecified, the Dataflow service uses the project's Compute Engine default service account.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "staging_location": {
            "defaultValue": "",
            "description": "The Cloud Storage path for staging local files. Must be a valid Cloud Storage URL, beginning with gs://. For more details, see https://cloud.google.com/dataflow/docs/guides/setting-pipeline-options#setting_required_options.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "subnetwork": {
            "defaultValue": "",
            "description": "Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form \"https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK\" or \"regions/REGION/subnetworks/SUBNETWORK\". If the subnetwork is located in a Shared VPC network, you must use the complete URL.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "temp_location": {
            "defaultValue": "",
            "description": "The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://. For more details, see https://cloud.google.com/dataflow/docs/guides/setting-pipeline-options#setting_required_options.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "transform_name_mappings": {
            "defaultValue": {},
            "description": "Use this to pass transformNameMappings for streaming update jobs. Example: `{\"oldTransformName\":\"newTransformName\",...}`. For more details, see https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#Mapping",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "update": {
            "defaultValue": false,
            "description": "Set this to true if you are sending a request to update a running streaming job. When set, the job name should be the same as the running job.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "validate_only": {
            "defaultValue": false,
            "description": "If true, the request is validated but not actually executed. Defaults to false.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "worker_region": {
            "defaultValue": "",
            "description": "The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "worker_zone": {
            "defaultValue": "",
            "description": "The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with workerRegion. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.",
            "isOptional": true,
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "gcp_resources": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-deploy-cloud-run-inference-service": {
      "executorLabel": "exec-deploy-cloud-run-inference-service",
      "inputDefinitions": {
        "parameters": {
          "image_uri": {
            "parameterType": "STRING"
          },
          "model_version": {
            "parameterType": "STRING"
          },
          "project_id": {
            "parameterType": "STRING"
          },
          "region": {
            "parameterType": "STRING"
          },
          "service_name": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-get-previous-model": {
      "executorLabel": "exec-get-previous-model",
      "inputDefinitions": {
        "parameters": {
          "bucket_name": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-wait-for-dataflow-job": {
      "executorLabel": "exec-wait-for-dataflow-job",
      "inputDefinitions": {
        "parameters": {
          "job_name": {
            "parameterType": "STRING"
          },
          "poll_interval": {
            "defaultValue": 30.0,
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "project_id": {
            "parameterType": "STRING"
          },
          "region": {
            "parameterType": "STRING"
          },
          "timeout": {
            "defaultValue": 1800.0,
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-custom-training-job": {
        "container": {
          "args": [
            "--type",
            "CustomJob",
            "--payload",
            "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"job_spec\": {\"worker_pool_specs\": {{$.inputs.parameters['worker_pool_specs']}}, \"scheduling\": {\"timeout\": \"{{$.inputs.parameters['timeout']}}\", \"restart_job_on_worker_restart\": {{$.inputs.parameters['restart_job_on_worker_restart']}}, \"strategy\": \"{{$.inputs.parameters['strategy']}}\", \"max_wait_duration\": \"{{$.inputs.parameters['max_wait_duration']}}\"}, \"service_account\": \"{{$.inputs.parameters['service_account']}}\", \"tensorboard\": \"{{$.inputs.parameters['tensorboard']}}\", \"enable_web_access\": {{$.inputs.parameters['enable_web_access']}}, \"network\": \"{{$.inputs.parameters['network']}}\", \"reserved_ip_ranges\": {{$.inputs.parameters['reserved_ip_ranges']}}, \"base_output_directory\": {\"output_uri_prefix\": \"{{$.inputs.parameters['base_output_directory']}}\"}, \"persistent_resource_id\": \"{{$.inputs.parameters['persistent_resource_id']}}\"}, \"labels\": {{$.inputs.parameters['labels']}}, \"encryption_spec\": {\"kms_key_name\": \"{{$.inputs.parameters['encryption_spec_key_name']}}\"}}",
            "--project",
            "{{$.inputs.parameters['project']}}",
            "--location",
            "{{$.inputs.parameters['location']}}",
            "--gcp_resources",
            "{{$.outputs.parameters['gcp_resources'].output_file}}"
          ],
          "command": [
            "python3",
            "-u",
            "-m",
            "google_cloud_pipeline_components.container.v1.custom_job.launcher"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.19.0"
        }
      },
      "exec-dataflow-flex-template": {
        "container": {
          "args": [
            "--type",
            "DataflowJob",
            "--project",
            "{{$.inputs.parameters['project']}}",
            "--location",
            "{{$.inputs.parameters['location']}}",
            "--payload",
            "{\"Concat\": [\"{\", \"\\\"launch_parameter\\\": {\", \"\\\"job_name\\\": \\\"\", \"{{$.inputs.parameters['job_name']}}\", \"\\\"\", \", \\\"container_spec_gcs_path\\\": \\\"\", \"{{$.inputs.parameters['container_spec_gcs_path']}}\", \"\\\"\", \", \\\"parameters\\\": \", \"{{$.inputs.parameters['parameters']}}\", \", \\\"launch_options\\\": \", \"{{$.inputs.parameters['launch_options']}}\", \", \\\"environment\\\": {\", \"\\\"num_workers\\\": \", \"{{$.inputs.parameters['num_workers']}}\", \", \\\"max_workers\\\": \", \"{{$.inputs.parameters['max_workers']}}\", \", \\\"service_account_email\\\": \\\"\", \"{{$.inputs.parameters['service_account_email']}}\", \"\\\"\", \", \\\"temp_location\\\": \\\"\", \"{{$.inputs.parameters['temp_location']}}\", \"\\\"\", \", \\\"machine_type\\\": \\\"\", \"{{$.inputs.parameters['machine_type']}}\", \"\\\"\", \", \\\"additional_experiments\\\": \", \"{{$.inputs.parameters['additional_experiments']}}\", \", \\\"network\\\": \\\"\", \"{{$.inputs.parameters['network']}}\", \"\\\"\", \", \\\"subnetwork\\\": \\\"\", \"{{$.inputs.parameters['subnetwork']}}\", \"\\\"\", \", \\\"additional_user_labels\\\": \", \"{{$.inputs.parameters['additional_user_labels']}}\", \", \\\"kms_key_name\\\": \\\"\", \"{{$.inputs.parameters['kms_key_name']}}\", \"\\\"\", \", \\\"ip_configuration\\\": \\\"\", \"{{$.inputs.parameters['ip_configuration']}}\", \"\\\"\", \", \\\"worker_region\\\": \\\"\", \"{{$.inputs.parameters['worker_region']}}\", \"\\\"\", \", \\\"worker_zone\\\": \\\"\", \"{{$.inputs.parameters['worker_zone']}}\", \"\\\"\", \", \\\"enable_streaming_engine\\\": \", \"{{$.inputs.parameters['enable_streaming_engine']}}\", \", \\\"flexrs_goal\\\": \\\"\", \"{{$.inputs.parameters['flexrs_goal']}}\", \"\\\"\", \", \\\"staging_location\\\": \\\"\", \"{{$.inputs.parameters['staging_location']}}\", \"\\\"\", \", \\\"sdk_container_image\\\": \\\"\", \"{{$.inputs.parameters['sdk_container_image']}}\", \"\\\"\", \", \\\"disk_size_gb\\\": \", \"{{$.inputs.parameters['disk_size_gb']}}\", \", \\\"autoscaling_algorithm\\\": \\\"\", \"{{$.inputs.parameters['autoscaling_algorithm']}}\", \"\\\"\", \", \\\"dump_heap_on_oom\\\": \", \"{{$.inputs.parameters['dump_heap_on_oom']}}\", \", \\\"save_heap_dumps_to_gcs_path\\\": \\\"\", \"{{$.inputs.parameters['save_heap_dumps_to_gcs_path']}}\", \"\\\"\", \", \\\"launcher_machine_type\\\": \\\"\", \"{{$.inputs.parameters['launcher_machine_type']}}\", \"\\\"\", \", \\\"enable_launcher_vm_serial_port_logging\\\": \", \"{{$.inputs.parameters['enable_launcher_vm_serial_port_logging']}}\", \"}\", \", \\\"update\\\": \", \"{{$.inputs.parameters['update']}}\", \", \\\"transform_name_mappings\\\": \", \"{{$.inputs.parameters['transform_name_mappings']}}\", \"}\", \", \\\"validate_only\\\": \", \"{{$.inputs.parameters['validate_only']}}\", \"}\"]}",
            "--gcp_resources",
            "{{$.outputs.parameters['gcp_resources'].output_file}}"
          ],
          "command": [
            "python3",
            "-u",
            "-m",
            "google_cloud_pipeline_components.container.preview.dataflow.flex_template.launcher"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.19.0"
        }
      },
      "exec-deploy-cloud-run-inference-service": {
        "container": {
          "args": [
            "--image",
            "{{$.inputs.parameters['image_uri']}}",
            "--region",
            "{{$.inputs.parameters['region']}}",
            "--platform",
            "managed",
            "--project",
            "{{$.inputs.parameters['project_id']}}",
            "--allow-unauthenticated",
            "--set-env-vars",
            "MODEL_VERSION={{$.inputs.parameters['model_version']}}",
            "--memory",
            "2Gi",
            "--timeout",
            "300"
          ],
          "command": [
            "gcloud",
            "run",
            "deploy",
            "{{$.inputs.parameters['service_name']}}"
          ],
          "image": "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
        }
      },
      "exec-get-previous-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "get_previous_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef get_previous_model(bucket_name: str) -> str:\n    \"\"\"Fetch the previous model version from GCS and return it as a string.\"\"\"\n    from google.cloud import storage\n    client = storage.Client()\n    bucket = client.bucket(bucket_name)\n    blobs = list(bucket.list_blobs(prefix=\"v-\"))\n\n    model_versions = sorted(\n        [blob.name for blob in blobs if \"v-\" in blob.name],\n        reverse=True\n    )\n\n    latest_model = model_versions[0] if model_versions else \"None\"\n    return latest_model  # Directly returning the value\n\n"
          ],
          "image": "python:3.10"
        }
      },
      "exec-wait-for-dataflow-job": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "wait_for_dataflow_job"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-api-python-client' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef wait_for_dataflow_job(project_id: str, region: str, job_name: str, poll_interval: int = 30, timeout: int = 1800):\n    \"\"\"\n    Polls the Dataflow job status every `poll_interval` seconds until it reaches a terminal state\n    or the `timeout` is reached.\n    \"\"\"\n    from googleapiclient.discovery import build\n    import time\n\n    dataflow = build('dataflow', 'v1b3')\n    elapsed_time = 0\n    job_id = None\n\n    # Retrieve the job ID based on the job name\n    request = dataflow.projects().locations().jobs().list(\n        projectId=project_id, location=region)\n    while request is not None:\n        response = request.execute()\n        for job in response.get('jobs', []):\n            if job['name'] == job_name:\n                job_id = job['id']\n                break\n        request = dataflow.projects().locations().jobs().list_next(\n            previous_request=request, previous_response=response)\n        if job_id:\n            break\n\n    if not job_id:\n        raise ValueError(f\"No job found with name {job_name}\")\n\n    while elapsed_time < timeout:\n        job = dataflow.projects().locations().jobs().get(\n            projectId=project_id,\n            location=region,\n            jobId=job_id\n        ).execute()\n\n        state = job.get('currentState', 'UNKNOWN')\n        print(f\"Dataflow job {job_id} is in state: {state}\")\n\n        if state == 'JOB_STATE_DONE':\n            print(f\"Dataflow job {job_id} completed successfully.\")\n            return\n        elif state in ['JOB_STATE_FAILED', 'JOB_STATE_CANCELLED']:\n            raise RuntimeError(\n                f\"Dataflow job {job_id} failed with state: {state}\")\n\n        time.sleep(poll_interval)\n        elapsed_time += poll_interval\n\n    raise TimeoutError(\n        f\"Dataflow job {job_id} did not complete within the allotted time of {timeout} seconds.\")\n\n"
          ],
          "image": "python:3.10"
        }
      }
    }
  },
  "pipelineInfo": {
    "description": "Pipeline that orchestrates Dataflow preprocessing, training, and Cloud Run deployment.",
    "name": "creature-vision-pipeline"
  },
  "root": {
    "dag": {
      "tasks": {
        "custom-training-job": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-custom-training-job"
          },
          "dependentTasks": [
            "get-previous-model",
            "wait-for-dataflow-job"
          ],
          "inputs": {
            "parameters": {
              "display_name": {
                "runtimeValue": {
                  "constant": "creature-vision-training"
                }
              },
              "location": {
                "componentInputParameter": "region"
              },
              "pipelinechannel--get-previous-model-Output": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "get-previous-model"
                }
              },
              "pipelinechannel--python_package_gcs_uri": {
                "componentInputParameter": "python_package_gcs_uri"
              },
              "project": {
                "componentInputParameter": "project_id"
              },
              "service_account": {
                "componentInputParameter": "service_account"
              },
              "tensorboard": {
                "runtimeValue": {
                  "constant": "projects/284159624099/locations/us-east1/tensorboards/3018185806524186624"
                }
              },
              "worker_pool_specs": {
                "runtimeValue": {
                  "constant": [
                    {
                      "machine_spec": {
                        "machine_type": "e2-standard-4"
                      },
                      "python_package_spec": {
                        "args": [
                          "--version",
                          "v-20250323",
                          "--previous_model_version",
                          "{{$.inputs.parameters['pipelinechannel--get-previous-model-Output']}}"
                        ],
                        "executor_image_uri": "us-docker.pkg.dev/vertex-ai/training/tf-cpu.2-17.py310:latest",
                        "package_uris": [
                          "{{$.inputs.parameters['pipelinechannel--python_package_gcs_uri']}}"
                        ],
                        "python_module": "creature_vision_training.main"
                      },
                      "replica_count": 1.0
                    }
                  ]
                }
              }
            }
          },
          "taskInfo": {
            "name": "custom-training-job"
          }
        },
        "dataflow-flex-template": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-dataflow-flex-template"
          },
          "inputs": {
            "parameters": {
              "container_spec_gcs_path": {
                "componentInputParameter": "gcs_template_path"
              },
              "job_name": {
                "runtimeValue": {
                  "constant": "creature-vis-training-20250323"
                }
              },
              "launch_options": {
                "runtimeValue": {
                  "constant": {
                    "enable_preflight_validation": "false"
                  }
                }
              },
              "location": {
                "componentInputParameter": "region"
              },
              "parameters": {
                "runtimeValue": {
                  "constant": {
                    "max_files": "1000",
                    "version": "v-20250323"
                  }
                }
              },
              "service_account_email": {
                "componentInputParameter": "service_account"
              }
            }
          },
          "taskInfo": {
            "name": "dataflow-flex-template"
          }
        },
        "deploy-cloud-run-inference-service": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-deploy-cloud-run-inference-service"
          },
          "dependentTasks": [
            "custom-training-job"
          ],
          "inputs": {
            "parameters": {
              "image_uri": {
                "componentInputParameter": "inference_image"
              },
              "model_version": {
                "runtimeValue": {
                  "constant": "v-20250323"
                }
              },
              "project_id": {
                "componentInputParameter": "project_id"
              },
              "region": {
                "componentInputParameter": "region"
              },
              "service_name": {
                "componentInputParameter": "inference_service"
              }
            }
          },
          "taskInfo": {
            "name": "deploy-cloud-run-inference-service"
          }
        },
        "get-previous-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-get-previous-model"
          },
          "inputs": {
            "parameters": {
              "bucket_name": {
                "componentInputParameter": "model_bucket"
              }
            }
          },
          "taskInfo": {
            "name": "get-previous-model"
          }
        },
        "wait-for-dataflow-job": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-wait-for-dataflow-job"
          },
          "dependentTasks": [
            "dataflow-flex-template"
          ],
          "inputs": {
            "parameters": {
              "job_name": {
                "runtimeValue": {
                  "constant": "creature-vis-training-20250323"
                }
              },
              "project_id": {
                "componentInputParameter": "project_id"
              },
              "region": {
                "componentInputParameter": "region"
              }
            }
          },
          "taskInfo": {
            "name": "wait-for-dataflow-job"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "gcs_template_path": {
          "parameterType": "STRING"
        },
        "inference_image": {
          "parameterType": "STRING"
        },
        "inference_service": {
          "parameterType": "STRING"
        },
        "model_bucket": {
          "parameterType": "STRING"
        },
        "pipeline_root": {
          "parameterType": "STRING"
        },
        "project_id": {
          "parameterType": "STRING"
        },
        "python_package_gcs_uri": {
          "parameterType": "STRING"
        },
        "region": {
          "parameterType": "STRING"
        },
        "service_account": {
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.10.1"
}